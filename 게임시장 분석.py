# -*- coding: utf-8 -*-
"""AI13_Section01_Project01_강선민.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/kangsunmin/project01/blob/main/AI_13_project01_%EA%B0%95%EC%84%A0%EB%AF%BC_Section1.ipynb

# ***Goal: 다음 분기에 어느 장르의 게임을 출시하는게 적합할 까?*** :)


---


**사전파악이 필요한 세부사항**
*   지역에 따라 선호하는 게임 장르가 다른지
*   연도별 게임의 트렌드는 있는지
*   출고량이 높은 게임에 대한 분석 및 시각화 프로세스


---
**목표 달성 방향성**


*  지역 및 연도를 통한 트랜드의 방향을 파악하고, 
  출고량이 어느정도 유지되고 있는 게임을 출시하여 점유율을 
  가져올 수 있는 방향으로 분석 할 예정.



---
**처리순서**
1.   데이터셋 불러오기
2.   결측치, 이상치 확인 및 제거/ 데이터 스케일링(전처리)
3.   feature engineering(변수 다듬기, 변수 생성)
4.   예측 및 해석

# ***데이터셋 불러오기***/ ***결측치, 이상치 확인 및 제거***
"""

# 한글 깨짐 현상 제거
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

plt.rc('font', family='NanumBarunGothic')

from google.colab import files   #파일 업로드
uploaded = files.upload()

import io
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 데이터 전처리 및 시각화 대비 작업.

df = pd.read_csv(io.StringIO(uploaded['vgames2.csv'].decode('utf-8')))
del df['Unnamed: 0'] # 불필요한 열 제거

df.shape
# (16598, 9)  ----> 전체 행, 열 갯수

df.info()  # 데이터 타입 확인 / 특이사항: Year=float, 그 외 = object

df.isnull().sum()  #결측치 확인====> Year(271)/ Genre(50)/ Publisher(58)

df.dropna(subset=['Genre', 'Year'], axis=0, inplace=True) # 위에서 발견된 결측치 제거

df.fillna({'Publisher':'Unknown'}, inplace=True)   # 해당 결측치 대체

df.shape 

# (16277, 9) ======> 321개의 열(row)가 제거되었고, 분석하는데 필요한 데이터에는 영향이 없을것으로 보인다...

df['Year'] = df['Year'].round(0).astype(int) # Year 변수형태가 float이므로 int로 수정

def fix_Y(x):
    if x >= 0 and x <= 20:
        x = x + 2000
    elif x >= 21 and x <= 99:
        x = x + 1900
    else:
        x
    return x

df['Year'] = df['Year'].apply(fix_Y)   # 데이터 상 Year 열에 1~99 사이의 숫자(이상치)를 발견하여 수정.

df #데이터 1차 점검

df_sorted_by_values = df.sort_values(by='NA_Sales' ,ascending=False)
df_sorted_by_values.head()

# Sales : object -> float
# value 사이에 K, M이 확인됨. K=1, M=0.001로 변경(한눈에 보기 쉽도록 단위값 수정)

def tofloat(x):
    if x[-1] == 'K':
        x = float(x.replace('K', '')) / 1000       
    elif x[-1] == 'M':
        x = float(x.replace('M', '')) / 1000000
    else:
        x
    return x

df['NA_Sales'] = df['NA_Sales'].apply(tofloat).astype(float)
df['EU_Sales'] = df['EU_Sales'].apply(tofloat).astype(float)
df['JP_Sales'] = df['JP_Sales'].apply(tofloat).astype(float)
df['Other_Sales'] = df['Other_Sales'].apply(tofloat).astype(float)

df_sorted_by_values = df.sort_values(by='NA_Sales' ,ascending=False)
df_sorted_by_values.head()  # K, M 단위값 수정되었는지 확인!

df['Total_Sales'] = df['NA_Sales'] + df['EU_Sales'] + df['JP_Sales'] + df['Other_Sales'] # Sales 값을 더하고 Total Sales 컬럼 생성.

df.duplicated().sum()  # 중복값 확인 === 0 (없음)

df.describe() # 데이터프레임 요약

"""***데이터 상으로 북미, 유럽의 출고량이 월등히 높으므로 다음 분기 게임 출시 지역은 북미, 유럽을 타겟지역으로 지정하는 것이 구매율을 더 높일 것으로 예측됨***"""

# 전체 출고량이 가장 높은 게임 장르 데이터셋
df1 = df[['Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Total_Sales']]
df1 = df1.melt(id_vars='Genre', value_vars=['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Total_Sales'])
df1 = pd.crosstab(index=df1.Genre, columns=df1.variable, values=df1.value, aggfunc=sum).reset_index()

df1['Percentage'] = round(( df1['Total_Sales'] / df1['Total_Sales'].sum() ) * 100, 2)

values = df1['Percentage']
labels = df1['Genre']
explode = [0.15]*12

plt.figure(figsize=(12,12)) # 시각화 한 그림의 크기 설정
plt.pie(values, labels=labels, explode=[0.2,0,0,0,0.1,0,0.1,0.1,0.2,0,0.2,0], autopct='%.1f%%', shadow=True,
        colors=color,  startangle=90, counterclock=False) # 파이 차트를 통한 데이터프레임 시각화
color = ['red', 'whitesmoke', 'whitesmoke', 'whitesmoke', 'orange', 'whitesmoke',
         'orange', 'orange' ,'red', 'whitesmoke', 'red', 'whitesmoke']
plt.title('Preference of game genre', fontsize=30, position=(0.5, 1.0+0.1))
plt.legend(labels, loc="center left", bbox_to_anchor=(1.2, 0, 0.5, 1))  # 항목 나열
plt.show()

"""***선호하는 장로는 대체적으로 Action, Sports, Shooter.***
**`하지만, 앞으로 전망이 있는 Role-Playingm, Platform, Racing`**
---

# ***<가설검정을 통한 지역별로 선호하는 게임 장르 파악하기>***
"""

# 가설검정을 위해 필요한 열만 가져와서 tidy data로 변환
df0 = df[['Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales','Total_Sales']]
df_tidy = df1.melt(id_vars='Genre', value_vars=['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales','Total_Sales'])

# dataframe 변경
df_cr = pd.crosstab(df_tidy['variable'], df_tidy['Genre'], values=df_tidy['value'], aggfunc=sum)

from scipy.stats import chi2_contingency

chi2 = chi2_contingency(df_cr)
chi2

# 카이제곱검정 진행

"""H0 = 지역에 따라 선호하는 게임 장르는 없다.

H(a) = 지역에 따라 선호하는 게임 장르가 있다.








p-value = 2.647817402235075e-118     ->     p-value 값이 0.05보다 작은 값이 도출됨.

즉, H0 기각. H(a) 채택함  
"""

df0 = pd.crosstab(index=df_tidy.Genre, columns=df_tidy.variable, values=df_tidy.value, aggfunc=sum).reset_index()
# dataframe 추출 및 변형

# 시각화 작업
fig, axs = plt.subplots(2,2, figsize=(15,10))
colors = ['skyblue', 'lightgray', 'lightgray', 'lightgray', 'gold', 'lightgray',
         'gold', 'gold' ,'skyblue', 'lightgray', 'skyblue', 'lightgray']
          
fig.suptitle('Regional Preference of game genre', fontsize=20)

axs[0,0].set_title('NA_Sales')
axs[0,0].barh(df0['Genre'], df0['NA_Sales'], color=colors, alpha=0.7)

axs[0,1].set_title('EU_Sales')
axs[0,1].barh(df0['Genre'], df0['EU_Sales'], color=colors, alpha=0.7)

axs[1,0].set_title('JP_Sales')
axs[1,0].barh(df0['Genre'], df0['JP_Sales'], color=colors, alpha=0.7)

axs[1,1].set_title('Other_Sales')
axs[1,1].barh(df0['Genre'], df0['Other_Sales'], color=colors, alpha=0.7)

"""# ***시각화 결과를 보면,***
*   북미, 유럽, 그 외 국가에서는  Action, Sports, Shooter 장르를 선호한다.
*   일본에서는 Role-Playing, Action, Sports 장르를 선호하는 것으로 나타났다.

***하지만 그래프를 자세히 보면 내가 이번 프로젝트의 목표를 설정한 대로 Action, Sports, Shooter을 제외한 Role-Playing, Platform, Racing 장르도 점유율을 높일 수 있는 발판을 마련하고 있는 것으로 보여진다***.


"""

df2 = df[['Year', 'Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
df2 = df2.groupby(['Year', 'Genre']).sum().reset_index()
df2['Total_Sales'] = df2['NA_Sales'] + df2['EU_Sales'] + df2['JP_Sales'] + df2['Other_Sales']
df2 = df2.drop(['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'], axis=1)

#연도별 게임 트랜드를 파악하기 위한 데이터셋을 새로 만듬

filt1 = (df2['Year'] >= 2010) & (df2['Year'] <= 2020)
df10 = df2[filt1]

# 2020년 기준, 최근 10년간 게임 트랜드

sns.catplot(x='Year', y='Total_Sales', hue='Genre', kind='bar',
            data=df10, edgecolor='.6', height=8, aspect=15/8 )

"""# ***#출고량 높은 게임에 대한 분석 및 시각화/ 게임 플랫폼 점유율 파악#***


## [분석 조건]
*   장르는 Role-Playing, Platform, Racing, Misc, 이 4개의 장르에 한정하여 분석한다. (기존의 출고량이 월등히 높은 Action, Sports, Shooter를 포함하여 다른 장르와 함께 점유율을 균등하게 만들어 게임 장르의 생태계를 넓히고자 하는 의도.)
*   기간은 2020년 기준, 최근 10년으로 지정한다.


"""

df_ex = (df['Genre'] == 'Role-Playing') | (df['Genre'] == 'Platform') | (df['Genre'] == 'Racing') 
df_ex0 = df['Year'] >= 2010

a = df[df_ex]
b = df[df_ex0]

df_ksm = pd.merge(a, b, how='inner')

df_ksm = df_ksm.drop(['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'], axis=1)\
                .sort_values('Total_Sales', ascending=False).round(2)

df_ksm.head(20)

df_sorted_by_values = df_ksm.sort_values(by='Total_Sales' ,ascending=False)
df_sorted_by_values.head()

"""# ***설정한 3개의 장르별 구매율 높은 게임 선정***

*   ***Role-Playing ===== Pokemon Black/Pokemon White           /    Pokemon Omega Ruby/Pokemon Alpha Sapphire***    [포켓몬 시리즈별 게임]
* ***Platform ===== Super Mario 3D Land***
* ***Racing ==== Mario Kart 7/ Gran Turismo 5***

# ***###결론###***


1. 지역에 따라 선호하는 게임 장르가 있음. 
2. 연도별 게임의 트랜드가 있음(시간이 지날수록 축소하는 경향이 있지만 트랜드는 존재한다.)


======> 북미, 유럽, 그 외 국가에는 Role-Playing, Platform, Racing 3개의 장르 모두 균등한 점유율을 가지고 있으므로 안정적인 수익성을 보장하기에 좋은 장르라고 생각된다. 반면, 일본은  Role-Playing의 점유율이 너무 불균형한 형태를 보이고 있다. 즉 일본에는 Role-Playing보다는 Platform, Racing 2개의 장르를 타겟으로 하는게 장기간으로 봤을 때의 점유율 안정성으로는 좀 더 안정적인 수익성을 가져올거라고 판단된다.
"""